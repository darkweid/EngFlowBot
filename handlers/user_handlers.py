import asyncio, random, json, csv, time

from aiogram import Router, F, Bot
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import default_state
from aiogram.types import LinkPreviewOptions, CallbackQuery, Message, ReplyKeyboardRemove
from states import LearningFSM, TestFSM
from utils import send_message_to_admin
from lexicon import *
from db import *
from keyboards import keyboard_builder, main_menu_keyboard

user_router: Router = Router()
exercise_manager = ExerciseManager()
user_progress_manager = UserProgressManager()
user_manager = UserManager()


@user_router.message(Command(commands=["reset_fsm"]))
async def resetFSM_command(message: Message, state: FSMContext):
    await state.clear()
    await message.answer('–°–±—Ä–æ—à–µ–Ω–æ!')


@user_router.message(Command(commands=["start"]),
                     StateFilter(default_state))  # —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ –±–æ—Ç–µ
async def process_start_command(message: Message, state: FSMContext):
    user_id = int(message.from_user.id)
    full_name = message.from_user.full_name
    tg_login = message.from_user.username
    await user_manager.add_user(user_id, full_name, tg_login)
    await message.answer(
        f'–ü—Ä–∏–≤–µ—Ç, {message.from_user.full_name}\n–Ø –±–æ—Ç –æ—Ç <a href="http://t.me/Oprus">–û–ª–∏ –ü—Ä—É—Å</a>üòä'
        f'\n{MessagesEnum.WELCOME_NEW_USER.value}',
        link_preview_options=LinkPreviewOptions(is_disabled=True))
    await message.answer(MessagesEnum.WELCOME_EXISTING_USER,
                         reply_markup=main_menu_keyboard)
    await send_message_to_admin(message.bot, f"""–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å.
–ò–º—è: {message.from_user.full_name}\n–¢–µ–ª–µ–≥—Ä–∞–º: @{message.from_user.username}\n""")
    await state.set_state(TestFSM.test)


@user_router.message(Command(commands=['main_menu']),
                     ~StateFilter(default_state))  # –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ –±–æ—Ç–µ
@user_router.message(Command(commands=['start']), ~StateFilter(default_state))
async def process_start_command_existing_user(message: Message, state: FSMContext):
    user_id = int(message.from_user.id)
    full_name = message.from_user.full_name
    tg_login = message.from_user.username
    await user_manager.add_user(user_id, full_name, tg_login)
    await message.answer(MessagesEnum.WELCOME_EXISTING_USER.value,
                         reply_markup=main_menu_keyboard)
    await state.set_state(LearningFSM.choose_type_of_exercise)


@user_router.callback_query((F.data == ButtonEnum.MAIN_MENU.value), ~StateFilter(default_state))
async def rules_grammar_training(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    await callback.message.delete()
    await callback.message.answer(MessagesEnum.WELCOME_EXISTING_USER.value,
                                  reply_markup=main_menu_keyboard)


@user_router.callback_query((F.data == '–ü—Ä–∞–≤–∏–ª–∞ –≥—Ä–∞–º–º–∞—Ç–∏–∫–∞'))
async def rules_grammar_training(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    await callback.message.edit_text(
        """–ü—Ä–∞–≤–∏–ª–∞ –ø—Ä–æ—Å—Ç—ã–µ:\n–Ø –ø–∏—à—É –Ω–∞ —Ä—É—Å—Å–∫–æ–º, —Ç—ã –ø–µ—Ä–µ–≤–æ–¥–∏—à—å –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π.\n\n–ï—Å–ª–∏ –æ—Ç–≤–µ—Ç—ã –Ω–µ —Å–æ–≤–ø–∞–¥—É—Ç:
‚ö™ –ú–æ–∂–µ—à—å –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –Ω–∞–ø–∏—Å–∞—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –µ—â—ë —Ä–∞–∑(–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –Ω–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–æ)\n‚ö™ –ú–æ–∂–µ—à—å –ø–æc–º–æ—Ç—Ä–µ—Ç—å –æ—Ç–≤–µ—Ç, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É ¬´–ü–æ–∫–∞–∂–∏ –æ—Ç–≤–µ—Ç¬ª""")

    # Grammar Training #


@user_router.callback_query((F.data == ButtonEnum.GRAMMAR_TRAINING.value))  # ,
# StateFilter(LearningFSM.choose_type_of_exercise))
async def start_grammar_training(callback: CallbackQuery, state: FSMContext):
    await callback.answer('–û—Ç–ª–∏—á–Ω—ã–π –≤—ã–±–æ—Ä!')
    await callback.message.delete()
    await  callback.message.answer(MessagesEnum.GRAMMAR_TRAINING_HELLO,
                                   reply_markup=keyboard_builder(1, **{'–ü—Ä–∞–≤–∏–ª–∞ –≥—Ä–∞–º–º–∞—Ç–∏–∫–∞': ButtonEnum.RULES}))
    # await asyncio.sleep(3)
    await callback.message.answer('–í—ã–±–µ—Ä–∏ —Ä–∞–∑–¥–µ–ª:', reply_markup=keyboard_builder(1, *[button.value for button in
                                                                                      GrammarTrainingButtons]))
    await state.set_state(LearningFSM.grammar_choosing_section)


@user_router.callback_query(StateFilter(LearningFSM.grammar_choosing_section))
async def choosing_section_grammar_training(callback: CallbackQuery, state: FSMContext):
    if callback.data in (button.value for button in GrammarTrainingButtons):
        await callback.answer('–•–æ—Ä–æ—à–∏–π –≤—ã–±–æ—Ä üòä')
        await callback.message.delete()
        await callback.message.answer(f"""–¢—ã –≤—ã–±—Ä–∞–ª —Ä–∞–∑–¥–µ–ª \"{callback.data}\"
\n–¢–≤–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å –≤ —ç—Ç–æ–º —Ä–∞–∑–¥–µ–ª–µ: {1} –∏–∑ {1}
\n–ì–æ—Ç–æ–≤ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—å?""", reply_markup=keyboard_builder(1, **{'–ì–æ—Ç–æ–≤ –≥—Ä–∞–º–º–∞—Ç–∏–∫–∞': ButtonEnum.READY}))
        await state.set_state(LearningFSM.grammar_choosed_section)
        await state.set_data(callback.data)
    else:
        await callback.answer()
        await callback.message.delete()
        await callback.message.answer(MessagesEnum.ERROR)


@user_router.callback_query((F.data == '–ì–æ—Ç–æ–≤ –≥—Ä–∞–º–º–∞—Ç–∏–∫–∞'))
async def choosed_section_grammar_training(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    await callback.message.delete()
    await callback.message.answer(f'–ü–µ—Ä–µ–≤–æ–¥–∏ —Å–ª–µ–¥—É—é—â–µ–µ:\n{None}')


@user_router.message(Command(commands=["info"]))
async def info_command(message: Message, state: FSMContext):
    await state.set_state(LearningFSM.default)
    await message.answer(MessagesEnum.INFO_RULES.value,
                         reply_markup=keyboard_builder(1, ButtonEnum.MAIN_MENU))


@user_router.message()
async def send_idontknow(message: Message):
    await message.reply(
        f'{message.from_user.first_name}, —è –≤—Å–µ–≥–æ –ª–∏—à—å –±–æ—Ç, —è –Ω–µ –∑–Ω–∞—é, —á—Ç–æ –Ω–∞ —ç—Ç–æ –æ—Ç–≤–µ—Ç–∏—Ç—åü§∑üèº‚Äç‚ôÄ'
    )
