import logging
from datetime import datetime, date, timedelta

from aiogram import Router, F
from aiogram.exceptions import TelegramBadRequest
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, Message

from config_data.settings import settings
from db import (UserManager, DailyStatisticsManager)
from keyboards import keyboard_builder, keyboard_builder_users
from lexicon import (AdminMenuButtons, MessageTexts, BasicButtons, TestingSections, testing_section_mapping,
                     NewWordsSections)
from services.new_words import NewWordsService
from services.testing import TestingService
from services.user_progress import UserProgressService
from services.user_words_learning import UserWordsLearningService
from states import AdminFSM, UserFSM
from utils import (update_state_data, delete_scheduled_broadcasts, schedule_broadcast, send_message_to_user,
                   send_long_message, check_line, get_word_declension)

ADMINS: list[int] = settings.admin_ids

admin_router: Router = Router()
testing_service: TestingService = TestingService()
user_progress_service: UserProgressService = UserProgressService()
user_manager: UserManager = UserManager()
new_words_service: NewWordsService = NewWordsService()
user_words_learning_service: UserWordsLearningService = UserWordsLearningService()
daily_progress_manager: DailyStatisticsManager = DailyStatisticsManager()


@admin_router.message(Command(commands=["admin"]))
async def admin_command(message: Message, state: FSMContext):
    if message.from_user.id in ADMINS:
        await message.answer('üîò –ü—Ä–∏–≤–µ—Ç, —á—Ç–æ –±—É–¥–µ–º –¥–µ–ª–∞—Ç—å? üîò',
                             reply_markup=await keyboard_builder(1, AdminMenuButtons.EXERCISES,
                                                                 AdminMenuButtons.SEE_ACTIVITY_DAY,
                                                                 AdminMenuButtons.SEE_ACTIVITY_WEEK,
                                                                 AdminMenuButtons.SEE_ACTIVITY_MONTH,
                                                                 AdminMenuButtons.USERS, AdminMenuButtons.BROADCAST,
                                                                 AdminMenuButtons.EXIT))
        await state.set_state(AdminFSM.default)
    else:
        await message.answer('üö´ –í–∞–º —Å—é–¥–∞ –Ω–µ–ª—å–∑—è üö´')


@admin_router.callback_query((F.data == AdminMenuButtons.MAIN_MENU))
async def admin_command(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text('üîò –ü—Ä–∏–≤–µ—Ç, —á—Ç–æ –±—É–¥–µ–º –¥–µ–ª–∞—Ç—å? üîò',
                                     reply_markup=await keyboard_builder(1, AdminMenuButtons.EXERCISES,
                                                                         AdminMenuButtons.SEE_ACTIVITY_DAY,
                                                                         AdminMenuButtons.SEE_ACTIVITY_WEEK,
                                                                         AdminMenuButtons.SEE_ACTIVITY_MONTH,
                                                                         AdminMenuButtons.USERS,
                                                                         AdminMenuButtons.BROADCAST,
                                                                         AdminMenuButtons.EXIT))
    await state.set_state(AdminFSM.default)


@admin_router.callback_query((F.data == 'close_message_admin'), ~StateFilter(AdminFSM.see_user_info))
@admin_router.callback_query((F.data == AdminMenuButtons.EXIT))
async def admin_exit(callback: CallbackQuery, state: FSMContext):
    try:
        await callback.message.delete()
    except TelegramBadRequest as e:
        logging.error(f"Failed to delete message: {e}")
    await callback.answer('–î–æ —Å–∫–æ—Ä—ã—Ö –≤—Å—Ç—Ä–µ—á üëã')
    await update_state_data(state, admin_section=None, admin_subsection=None, index_testing_edit=None,
                            index_testing_delete=None)
    await state.set_state(UserFSM.default)


@admin_router.callback_query((F.data == 'admin_close_without_state_changes'))  # close without change state
async def close_message_without_state_changes(callback: CallbackQuery):
    await callback.answer()
    try:
        await callback.message.delete()
    except TelegramBadRequest as e:
        logging.error(f"Failed to delete message: {e}")


@admin_router.callback_query((F.data == AdminMenuButtons.EXERCISES), StateFilter(AdminFSM.default))
@admin_router.callback_query((F.data == BasicButtons.BACK), StateFilter(AdminFSM.select_section_testing))
async def admin_exercises(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text('–í—ã–±–µ—Ä–∏ –≥—Ä—É–ø–ø—É —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π:',
                                     reply_markup=await keyboard_builder(1, AdminMenuButtons.MAIN_MENU,
                                                                         AdminMenuButtons.EXIT,
                                                                         args_go_first=False,
                                                                         tests_admin=AdminMenuButtons.TESTING,
                                                                         new_words_admin=AdminMenuButtons.NEW_WORDS,
                                                                         irr_verbs_admin=AdminMenuButtons.IRR_VERBS))
    await state.set_state(AdminFSM.default)


########################################## Testing ##########################################
@admin_router.callback_query((F.data == BasicButtons.BACK), StateFilter(AdminFSM.select_subsection_testing))
@admin_router.callback_query((F.data == 'tests_admin'))
async def admin_start_testing(callback: CallbackQuery, state: FSMContext):  # –≤—ã–±–æ—Ä —Ä–∞–∑–¥–µ–ª–∞ —Ç–µ—Å—Ç–æ–≤
    await callback.answer()
    await callback.message.edit_text('–í—ã–±–µ—Ä–∏ —Ä–∞–∑–¥–µ–ª —Ç–µ—Å—Ç–æ–≤:',
                                     reply_markup=await keyboard_builder(1, *[button for button in
                                                                              TestingSections], BasicButtons.BACK,
                                                                         BasicButtons.MAIN_MENU))
    await state.set_state(AdminFSM.select_section_testing)


@admin_router.callback_query(StateFilter(AdminFSM.select_section_testing))  # –≤—ã–±–æ—Ä –ü–û–î—Ä–∞–∑–¥–µ–ª–∞ —Ç–µ—Å—Ç–∞
async def admin_choosing_section_testing(callback: CallbackQuery, state: FSMContext):
    section = testing_section_mapping.get(callback.data)
    if section is None:
        await callback.answer()
        await callback.message.edit_text(MessageTexts.ERROR)
        await state.set_state(UserFSM.default)
        return

    await callback.message.edit_text(
        MessageTexts.CHOOSE_SUBSECTION_TEST,
        reply_markup=await keyboard_builder(1, *[button for button in section], BasicButtons.BACK,
                                            BasicButtons.MAIN_MENU))
    await state.set_state(AdminFSM.select_subsection_testing)
    await update_state_data(state, admin_section=callback.data, admin_subsection=None)


@admin_router.callback_query(
    StateFilter(AdminFSM.select_subsection_testing))  # –ø–æ–¥—Ä–∞–∑–¥–µ–ª –≤—ã–±—Ä–∞–Ω, –ø–æ–ª—É—á–µ–Ω –≤ callback
async def admin_choosing_subsection_testing(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    admin_subsection = callback.data
    data = await state.get_data()
    admin_section = data.get('admin_section')
    await callback.message.edit_text(
        f'–í—ã–±—Ä–∞–Ω —Ä–∞–∑–¥–µ–ª\n ¬´{admin_section} - {admin_subsection}¬ª\n\n–ß—Ç–æ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å?',
        reply_markup=await keyboard_builder(1, AdminMenuButtons.SEE_EXERCISES_TESTING,
                                            AdminMenuButtons.ADD_EXERCISE_TESTING,
                                            AdminMenuButtons.EDIT_EXERCISE_TESTING,
                                            AdminMenuButtons.DEL_EXERCISE_TESTING,
                                            AdminMenuButtons.MAIN_MENU,
                                            AdminMenuButtons.EXIT))
    await update_state_data(state, admin_subsection=admin_subsection)
    await state.set_state(AdminFSM.select_management_action_testing)


@admin_router.callback_query(F.data == AdminMenuButtons.SEE_EXERCISES_TESTING)
@admin_router.callback_query(F.data == AdminMenuButtons.ADD_EXERCISE_TESTING)
@admin_router.callback_query(F.data == AdminMenuButtons.EDIT_EXERCISE_TESTING)
@admin_router.callback_query(F.data == AdminMenuButtons.DEL_EXERCISE_TESTING)
async def admin_testing_management(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    subsection, section = data.get('admin_subsection'), data.get('admin_section')
    section_subsection = f'\"{section} - {subsection}\"'

    if section and callback.data == AdminMenuButtons.SEE_EXERCISES_TESTING:
        result = await testing_service.get_testing_exercises(subsection)
        if result:
            await callback.answer()
            await send_long_message(callback, f'–í–æ—Ç –≤—Å–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∏–∑ —Ä–∞–∑–¥–µ–ª–∞\n{section_subsection}:\n{result}',
                                    reply_markup=await keyboard_builder(1, close_message_admin=AdminMenuButtons.CLOSE))
        else:
            await callback.answer()
            await callback.message.edit_text(f'–í —Ä–∞–∑–¥–µ–ª–µ \n{section_subsection} –µ—â—ë –Ω–µ—Ç —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π',
                                             reply_markup=await keyboard_builder(1, AdminMenuButtons.MAIN_MENU,
                                                                                 AdminMenuButtons.EXIT))


    elif callback.data == AdminMenuButtons.ADD_EXERCISE_TESTING:
        await callback.message.edit_text(
            f"""–í–≤–µ–¥–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –∏ –æ—Ç–≤–µ—Ç –∫ –Ω–µ–º—É –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ —Ä–∞–∑–¥–µ–ª\n{section_subsection}\n
–í —Ñ–æ—Ä–º–∞—Ç–µ: \nEnglish sentence=+=Answer
\n–ú–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π, —Ç–æ–≥–¥–∞ –∫–∞–∂–¥–æ–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏
–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –Ω–µ –±–æ–ª–µ–µ 4096 —Å–∏–º–≤–æ–ª–æ–≤(–ª–∏–º–∏—Ç Telegram)""",
            reply_markup=await keyboard_builder(1, AdminMenuButtons.MAIN_MENU,
                                                AdminMenuButtons.EXIT))
        await state.set_state(AdminFSM.adding_exercise_testing)

    elif callback.data == AdminMenuButtons.EDIT_EXERCISE_TESTING:
        await callback.message.edit_text(
            f'–í–≤–µ–¥–∏ –Ω–æ–º–µ—Ä –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤ —Ä–∞–∑–¥–µ–ª–µ\n{section_subsection}\n',
            reply_markup=await keyboard_builder(1, AdminMenuButtons.MAIN_MENU,
                                                AdminMenuButtons.EXIT))
        await state.set_state(AdminFSM.editing_exercise_testing)


    elif callback.data == AdminMenuButtons.DEL_EXERCISE_TESTING:
        await callback.message.edit_text(f"""–í–≤–µ–¥–∏ –Ω–æ–º–µ—Ä –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏–∑\n{section_subsection}\n
–ï—Å–ª–∏ –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å –æ–¥–Ω–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ - –≤–≤–µ–¥–∏ –Ω–æ–º–µ—Ä –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è,
–µ—Å–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ - –≤–≤–µ–¥–∏ –Ω–æ–º–µ—Ä–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é""",
                                         reply_markup=await keyboard_builder(1, AdminMenuButtons.MAIN_MENU,
                                                                             AdminMenuButtons.EXIT))
        await state.set_state(AdminFSM.deleting_exercise_testing)


@admin_router.message(StateFilter(AdminFSM.adding_exercise_testing))  # ADD
async def admin_adding_sentence_testing(message: Message, state: FSMContext):
    try:
        data = await state.get_data()
        subsection, section = data.get('admin_subsection'), data.get('admin_section')
        sentences = message.text.split('\n')
        count_sentences = len(sentences)
        if count_sentences > 1:
            for group_sentences in sentences:
                test, answer = group_sentences.split('=+=')
                await testing_service.add_testing_exercise(section=section, subsection=subsection, test=test,
                                                           answer=answer)
        else:
            test, answer = message.text.split('=+=')
            await testing_service.add_testing_exercise(section=section, subsection=subsection, test=test,
                                                       answer=answer)

        await message.answer(
            f"""‚úÖ–£—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ {get_word_declension(count=count_sentences, word="—É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ")},
–º–æ–∂–µ—à—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ—â—ë –∏ —è –¥–æ–±–∞–≤–ª—é""",
            reply_markup=await keyboard_builder(1, AdminMenuButtons.MAIN_MENU, AdminMenuButtons.EXIT))

    except Exception as e:
        await message.answer('‚ùóÔ∏è–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑\n\n–ü—Ä–æ–≤–µ—Ä—å —Ñ–æ—Ä–º–∞—Ç —Ç–µ–∫—Å—Ç–∞',
                             reply_markup=await keyboard_builder(1, AdminMenuButtons.EXIT))
        await message.answer(str(e))


@admin_router.message(StateFilter(AdminFSM.editing_exercise_testing))  # EDIT
async def admin_editing_sentence_testing(message: Message, state: FSMContext):
    if message.text.isdigit():
        index = int(message.text)
        await update_state_data(state, index_testing_edit=index)
        data = await state.get_data()
        subsection, section, index_testing_edit = data.get('admin_subsection'), data.get('admin_section'), data.get(
            'index_testing_edit')
        exercise_name = f'\"{section} - {subsection}\"'
        await message.answer(f"""–û—Ç–ª–∏—á–Ω–æ, –±—É–¥–µ–º –∏–∑–º–µ–Ω—è—Ç—å \n–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ ‚Ññ {index_testing_edit}\n–í —Ä–∞–∑–¥–µ–ª–µ {exercise_name} 
–í–≤–µ–¥–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –∏ –æ—Ç–≤–µ—Ç –∫ –Ω–µ–º—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ: \nEnglish sentence=+=Answer""")
        await state.set_state(AdminFSM.ready_to_edit_exercise_testing)
    else:
        await message.answer('‚ùå–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑',
                             reply_markup=await keyboard_builder(1, AdminMenuButtons.MAIN_MENU, AdminMenuButtons.EXIT))


@admin_router.message(StateFilter(AdminFSM.ready_to_edit_exercise_testing))  # EDIT
async def admin_edit_sentence_testing(message: Message, state: FSMContext):
    data = await state.get_data()
    subsection, section, index_testing_edit = data.get('admin_subsection'), data.get('admin_section'), data.get(
        'index_testing_edit')
    try:
        test, answer = message.text.split('=+=')
        await testing_service.edit_testing_exercise(section=section, subsection=subsection, test=test, answer=answer,
                                                    index=index_testing_edit)
        await message.answer('‚úÖ–£—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ',
                             reply_markup=await keyboard_builder(1, AdminMenuButtons.MAIN_MENU))
        await state.set_state(AdminFSM.default)
        await update_state_data(state, admin_section=None, admin_subsection=None, index_testing_edit=None)
    except Exception as e:
        await message.answer(f'‚ùå–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑\n –û—à–∏–±–∫–∞:\n{str(e)}',
                             reply_markup=await keyboard_builder(1, AdminMenuButtons.EXIT))


@admin_router.message(StateFilter(AdminFSM.deleting_exercise_testing))  # DELETE
async def admin_deleting_sentence_testing(message: Message, state: FSMContext):
    data = await state.get_data()
    subsection, section = data.get('admin_subsection'), data.get('admin_section')
    exercise_name = f'\"{section} - {subsection}\"'
    indexes = []
    try:
        indexes = [int(num) for num in message.text.split(',')]
    except ValueError:
        await message.answer('‚ùå–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç, –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑ –≤–≤–µ—Å—Ç–∏ –Ω–æ–º–µ—Ä –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è',
                             reply_markup=await keyboard_builder(1, AdminMenuButtons.MAIN_MENU, AdminMenuButtons.EXIT))

    if len(indexes) == 1:
        index = indexes[0]
        await message.answer(f"""‚úÖ–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ ‚Ññ {index}\n<b>–£–¥–∞–ª–µ–Ω–æ</b> –∏–∑ —Ä–∞–∑–¥–µ–ª–∞ \n{exercise_name}""",
                             reply_markup=await keyboard_builder(1, AdminMenuButtons.MAIN_MENU, AdminMenuButtons.EXIT))
        await testing_service.delete_testing_exercise(section=section, subsection=subsection, index=index)
    elif len(indexes) > 1:
        for index in indexes:
            await testing_service.delete_testing_exercise(section=section, subsection=subsection, index=index)
        await message.answer(f"""‚úÖ–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è ‚Ññ {str(indexes)}\n <b>–£–¥–∞–ª–µ–Ω—ã</b> –∏–∑ —Ä–∞–∑–¥–µ–ª–∞ \n{exercise_name}""",
                             reply_markup=await keyboard_builder(1, AdminMenuButtons.MAIN_MENU, AdminMenuButtons.EXIT))


########################################## Users ##########################################

@admin_router.callback_query(F.data == AdminMenuButtons.USERS)
async def admin_users(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    users = await user_manager.get_all_users()
    users_ranks_and_points = await user_progress_service.get_all_users_ranks_and_points(medals_rank=True)
    rank_info = f"""<pre>–†–µ–π—Ç–∏–Ω–≥ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n
[{'‚Ññ'.center(6)}] [{'–ë–∞–ª–ª—ã'.center(7)}] [{'–ò–º—è'.center(20)}]\n"""
    count = 0
    for user in users_ranks_and_points:
        if count < 3:
            rank_info += \
                f"[{user.get('rank').center(5)}] [{user.get('points').center(7)}] [{user.get('full_name').center(20)}]\n"
        else:
            rank_info += \
                f"[{user.get('rank').center(6)}] [{user.get('points').center(7)}] [{user.get('full_name').center(20)}]\n"
        count += 1
    rank_info += "</pre>"

    await callback.message.answer(rank_info,
                                  reply_markup=await keyboard_builder(1,
                                                                      admin_close_without_state_changes=AdminMenuButtons.CLOSE))
    await callback.message.answer('–í—ã–±–µ—Ä–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:',
                                  reply_markup=await keyboard_builder_users(users))
    await state.set_state(AdminFSM.see_user_management)


@admin_router.callback_query(F.data == AdminMenuButtons.CLOSE, StateFilter(AdminFSM.see_user_management))
async def admin_see_user_info_close_message(callback: CallbackQuery):
    await callback.answer()
    try:
        await callback.message.delete()
    except TelegramBadRequest as e:
        logging.error(f"Failed to delete message: {e}")


@admin_router.callback_query(F.data == AdminMenuButtons.DEL_USER)
async def admin_delete_user(callback: CallbackQuery):
    await callback.answer()
    await callback.message.edit_text("–£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è?",
                                     reply_markup=await keyboard_builder(1, delete_user=AdminMenuButtons.YES,
                                                                         dont_delete_user=AdminMenuButtons.NO))


@admin_router.callback_query(F.data == 'delete_user')
async def admin_delete_user(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    data = await state.get_data()
    user_id = data.get('admin_user_id_management')
    await user_manager.delete_user(user_id=user_id)
    await callback.message.edit_text('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª—ë–Ω',
                                     reply_markup=await keyboard_builder(1, AdminMenuButtons.MAIN_MENU,
                                                                         AdminMenuButtons.CLOSE))


@admin_router.callback_query(StateFilter(AdminFSM.see_user_management))
@admin_router.callback_query(F.data == 'dont_delete_user')
async def admin_see_user_info(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    user_id = int(callback.data)
    await update_state_data(state, admin_user_id_management=user_id)
    info = await user_manager.get_user_info_text(user_id)
    await callback.message.answer(info,
                                  reply_markup=await keyboard_builder(1,
                                                                      AdminMenuButtons.ADD_WORDS_TO_USER_LEARNING,
                                                                      AdminMenuButtons.SEE_INDIVIDUAL_WORDS,
                                                                      AdminMenuButtons.DEL_INDIVIDUAL_WORDS,
                                                                      AdminMenuButtons.DEL_USER,
                                                                      AdminMenuButtons.CLOSE))
    await state.set_state(AdminFSM.user_managing)


##################### Individual words #####################

@admin_router.callback_query(F.data == AdminMenuButtons.ADD_WORDS_TO_USER_LEARNING,
                             StateFilter(AdminFSM.user_managing))
async def admin_add_words_to_user(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    user_id = (await state.get_data()).get('admin_user_id_management')
    user_full_name = (await user_manager.get_user(user_id=user_id)).get('full_name')
    await callback.message.edit_text(
        f"""–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–ª–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é <b><i>{user_full_name}</i></b>\n
–í–≤–µ–¥–∏ —Å–ª–æ–≤–æ –∏ –ø–µ—Ä–µ–≤–æ–¥ –∫ –Ω–µ–º—É <b><i>–≤ —Ñ–æ—Ä–º–∞—Ç–µ: \n–°–ª–æ–≤–æ=+=Word –∏–ª–∏ –°–ª–æ–≤–æ|Word
–ü—Ä–æ–±–µ–ª—ã –≤–æ–∫—Ä—É–≥ —Å–ª–æ–≤, –ø–æ—Ä—è–¥–æ–∫ —Ä—É—Å—Å–∫–∏–π/–∞–Ω–≥–ª–∏–π—Å–∫–∏–π <u>–Ω–µ –≤–∞–∂–µ–Ω</u></i></b>
\n–ú–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π, —Ç–æ–≥–¥–∞ –∫–∞–∂–¥–æ–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏
–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –Ω–µ –±–æ–ª–µ–µ 4096 —Å–∏–º–≤–æ–ª–æ–≤(–ª–∏–º–∏—Ç Telegram)""",
        reply_markup=await keyboard_builder(1, AdminMenuButtons.MAIN_MENU,
                                            AdminMenuButtons.EXIT))
    await state.set_state(AdminFSM.adding_words_to_user)


@admin_router.message(StateFilter(AdminFSM.adding_words_to_user))
async def admin_adding_words_to_user(message: Message, state: FSMContext):
    try:
        user_id = (await state.get_data()).get('admin_user_id_management')
        user_full_name = (await user_manager.get_user(user_id=user_id)).get('full_name')
        lines = message.text.split('\n')
        count_exercises = len(lines)
        word_declension = get_word_declension(count=count_exercises, word='–°–ª–æ–≤–æ')

        if count_exercises > 1:
            for line in lines:
                words = check_line(line)
                await user_words_learning_service.admin_add_words_to_learning(user_id=user_id, russian=words.russian,
                                                                              english=words.english)
        else:
            words = check_line(message.text)
            await user_words_learning_service.admin_add_words_to_learning(user_id=user_id, russian=words.russian,
                                                                          english=words.english)

        await message.answer(
            f"""‚úÖ–£—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ {word_declension} 
–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é <b><i>{user_full_name}</i></b>, –º–æ–∂–µ—à—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ—â—ë –∏ —è –¥–æ–±–∞–≤–ª—é""",
            reply_markup=await keyboard_builder(1, AdminMenuButtons.EXIT))

        await send_message_to_user(user_id=user_id,
                                   text=f"""–¢–µ–±–µ –¥–æ–±–∞–≤–∏–ª–∏ {word_declension}
–¥–ª—è –∏–∑—É—á–µ–Ω–∏—è. –ó–∞—Ö–æ–¥–∏ —É—á–∏—Ç—å üòä""", learning_button=True)

    except Exception as e:
        await message.answer(text='‚ùóÔ∏è' + str(e),
                             reply_markup=await keyboard_builder(1, AdminMenuButtons.EXIT))


@admin_router.callback_query(F.data == AdminMenuButtons.SEE_INDIVIDUAL_WORDS,
                             StateFilter(AdminFSM.user_managing))
async def admin_see_individual_words(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    data = await state.get_data()
    user_id = data.get('admin_user_id_management')
    result = await new_words_service.get_new_words_exercises(user_id)
    if result:
        await callback.answer()
        await send_long_message(callback,
                                f'–í–æ—Ç –≤—Å–µ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ —Å–ª–æ–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n{result}',
                                reply_markup=await keyboard_builder(1,
                                                                    admin_close_without_state_changes=AdminMenuButtons.CLOSE))
    else:
        await callback.answer()
        await callback.message.edit_text('–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—â–µ –Ω–µ—Ç –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã—Ö —Å–ª–æ–≤',
                                         reply_markup=await keyboard_builder(1, AdminMenuButtons.MAIN_MENU,
                                                                             AdminMenuButtons.EXIT))


@admin_router.callback_query(F.data == AdminMenuButtons.DEL_INDIVIDUAL_WORDS,
                             StateFilter(AdminFSM.user_managing))
async def admin_del_individual_words(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    await callback.message.edit_text(
        f"""–í–≤–µ–¥–∏ –Ω–æ–º–µ—Ä —Å–ª–æ–≤–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
–ï—Å–ª–∏ —Ö–æ—á–µ—à—å —É–¥–∞–ª–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–ª–æ–≤ - –≤–≤–µ–¥–∏ –Ω–æ–º–µ—Ä–∞ —Å–ª–æ–≤ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é""",
        reply_markup=await keyboard_builder(1, AdminMenuButtons.MAIN_MENU,
                                            AdminMenuButtons.EXIT))
    data = await state.get_data()
    user_id = data.get('admin_user_id_management')
    await update_state_data(state, admin_subsection=user_id, admin_section=user_id)
    await state.set_state(AdminFSM.deleting_exercise_words)


##################### New words #####################

@admin_router.callback_query(F.data == 'new_words_admin')
@admin_router.callback_query(F.data == 'back_to_sections_new_words_admin')
async def new_words_selecting_section_admin(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    await callback.message.edit_text(MessageTexts.SELECT_SECTION_WORDS,
                                     reply_markup=await keyboard_builder(1, *[button for button in
                                                                              NewWordsSections],
                                                                         AdminMenuButtons.MAIN_MENU))
    await state.set_state(AdminFSM.select_section_words)


@admin_router.callback_query(StateFilter(AdminFSM.select_section_words))
async def new_words_selected_section_admin(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    section = callback.data
    subsections = await new_words_service.get_subsection_names(section=section)
    buttons = [subsection for subsection in subsections]

    await callback.message.edit_text(
        MessageTexts.SELECT_SUBSECTION_WORDS,
        reply_markup=await keyboard_builder(1, *buttons,  # subsection buttons
                                            AdminMenuButtons.ADD_NEW_SECTION,
                                            AdminMenuButtons.MAIN_MENU,
                                            back_to_sections_new_words_admin=BasicButtons.BACK))
    await state.set_state(AdminFSM.select_subsection_words)
    await update_state_data(state, admin_section=section, admin_subsection=None)


@admin_router.callback_query(StateFilter(AdminFSM.select_subsection_words))
async def selected_subsection_new_words_admin(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    if callback.data != AdminMenuButtons.ADD_NEW_SECTION:
        await update_state_data(state, admin_subsection=callback.data)
        await state.set_state(AdminFSM.select_management_action_words)
        await callback.message.edit_text('–ß—Ç–æ —Ö–æ—á–µ—à—å –¥–µ–ª–∞—Ç—å?',
                                         reply_markup=await keyboard_builder(1, AdminMenuButtons.SEE_NEW_WORDS,
                                                                             AdminMenuButtons.ADD_NEW_WORDS,
                                                                             AdminMenuButtons.DEL_NEW_WORDS,
                                                                             AdminMenuButtons.EDIT_NEW_WORDS,
                                                                             AdminMenuButtons.MAIN_MENU,
                                                                             AdminMenuButtons.EXIT))
    elif callback.data == AdminMenuButtons.ADD_NEW_SECTION:
        await callback.message.edit_text("""–í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ä–∞–∑–¥–µ–ª–∞, –æ–±—Ä–∞—â–∞–π –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä –±—É–∫–≤.
–ü–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Ä–∞–∑–¥–µ–ª–∞ –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–∏—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ""",
                                         reply_markup=await keyboard_builder(1, AdminMenuButtons.MAIN_MENU,
                                                                             AdminMenuButtons.EXIT))
        await state.set_state(AdminFSM.adding_new_section)


@admin_router.message(StateFilter(AdminFSM.adding_new_section))
async def adding_new_section_to_words_admin(message: Message, state: FSMContext):
    new_subsection = message.text
    await update_state_data(state, admin_subsection=new_subsection)
    section = (await state.get_data()).get('admin_section')
    await message.answer(f'–î–æ–±–∞–≤–∏—Ç—å ¬´{new_subsection}¬ª –≤ —Ä–∞–∑–¥–µ–ª ¬´{section}¬ª?',
                         reply_markup=await keyboard_builder(1, AdminMenuButtons.YES,
                                                             AdminMenuButtons.EXIT))


@admin_router.callback_query(F.data == AdminMenuButtons.SEE_NEW_WORDS,
                             StateFilter(AdminFSM.select_management_action_words))
@admin_router.callback_query(F.data == AdminMenuButtons.ADD_NEW_WORDS,
                             StateFilter(AdminFSM.select_management_action_words))
@admin_router.callback_query(F.data == AdminMenuButtons.YES,
                             StateFilter(AdminFSM.adding_new_section))
@admin_router.callback_query(F.data == AdminMenuButtons.EDIT_NEW_WORDS,
                             StateFilter(AdminFSM.select_management_action_words))
@admin_router.callback_query(F.data == AdminMenuButtons.DEL_NEW_WORDS,
                             StateFilter(AdminFSM.select_management_action_words))
async def admin_words_management(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    subsection, section = data.get('admin_subsection'), data.get('admin_section')
    section_subsection = f'\"{section} - {subsection}\"'

    if section and callback.data == AdminMenuButtons.SEE_NEW_WORDS:
        result = await new_words_service.get_new_words_exercises(subsection)
        if result:
            await callback.answer()
            await send_long_message(callback,
                                    f'–í–æ—Ç –≤—Å–µ —Å–ª–æ–≤–∞ –∏–∑ —Ä–∞–∑–¥–µ–ª–∞\n{section_subsection}:\n{result}',
                                    reply_markup=await keyboard_builder(1, close_message_admin=AdminMenuButtons.CLOSE))
        else:
            await callback.answer()
            await callback.message.edit_text(f'–í —Ä–∞–∑–¥–µ–ª–µ {section_subsection} –µ—â—ë –Ω–µ—Ç —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π',
                                             reply_markup=await keyboard_builder(1, AdminMenuButtons.MAIN_MENU,
                                                                                 AdminMenuButtons.EXIT))


    elif callback.data == AdminMenuButtons.ADD_NEW_WORDS or callback.data == AdminMenuButtons.YES:
        await callback.message.edit_text(
            f"""–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–ª–æ–≤ –≤ —Ä–∞–∑–¥–µ–ª\n{section_subsection}\n
–í–≤–µ–¥–∏ —Å–ª–æ–≤–æ –∏ –ø–µ—Ä–µ–≤–æ–¥ –∫ –Ω–µ–º—É <b><i>–≤ —Ñ–æ—Ä–º–∞—Ç–µ: \n–°–ª–æ–≤–æ=+=Word –∏–ª–∏ –°–ª–æ–≤–æ|Word
–ü—Ä–æ–±–µ–ª—ã –≤–æ–∫—Ä—É–≥ —Å–ª–æ–≤, –ø–æ—Ä—è–¥–æ–∫ —Ä—É—Å—Å–∫–∏–π/–∞–Ω–≥–ª–∏–π—Å–∫–∏–π <u>–Ω–µ –≤–∞–∂–µ–Ω</u></i></b>
\n–ú–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π, —Ç–æ–≥–¥–∞ –∫–∞–∂–¥–æ–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏
–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –Ω–µ –±–æ–ª–µ–µ 4096 —Å–∏–º–≤–æ–ª–æ–≤(–ª–∏–º–∏—Ç Telegram)""",
            reply_markup=await keyboard_builder(1, AdminMenuButtons.MAIN_MENU,
                                                AdminMenuButtons.EXIT))
        await state.set_state(AdminFSM.adding_exercise_words)

    elif callback.data == AdminMenuButtons.EDIT_NEW_WORDS:
        await callback.message.edit_text(
            f'–í–≤–µ–¥–∏ –Ω–æ–º–µ—Ä —Å–ª–æ–≤–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤ —Ä–∞–∑–¥–µ–ª–µ\n{section_subsection}\n',
            reply_markup=await keyboard_builder(1, AdminMenuButtons.MAIN_MENU,
                                                AdminMenuButtons.EXIT))
        await state.set_state(AdminFSM.editing_exercise_words)


    elif callback.data == AdminMenuButtons.DEL_NEW_WORDS:
        await callback.message.edit_text(
            f"""–í–≤–µ–¥–∏ –Ω–æ–º–µ—Ä —Å–ª–æ–≤–∞/—Å–ª–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏–∑\n{section_subsection}\n
–ï—Å–ª–∏ –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å –æ–¥–Ω–æ - –≤–≤–µ–¥–∏ –Ω–æ–º–µ—Ä,
–µ—Å–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ - –≤–≤–µ–¥–∏ –Ω–æ–º–µ—Ä–∞ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é""",
            reply_markup=await keyboard_builder(1, AdminMenuButtons.MAIN_MENU,
                                                AdminMenuButtons.EXIT))
        await state.set_state(AdminFSM.deleting_exercise_words)


@admin_router.message(StateFilter(AdminFSM.adding_exercise_words))  # ADD word
async def admin_adding_words(message: Message, state: FSMContext):
    try:
        data = await state.get_data()
        subsection, section = data.get('admin_subsection'), data.get('admin_section')
        lines = message.text.split('\n')
        count_sentences = len(lines)

        if count_sentences > 1:
            for line in lines:
                words = check_line(line)
                await new_words_service.add_new_words_exercise(section=section, subsection=subsection,
                                                               russian=words.russian,
                                                               english=words.english)
        else:
            words = check_line(message.text)
            await new_words_service.add_new_words_exercise(section=section, subsection=subsection,
                                                           russian=words.russian,
                                                           english=words.english)

        await message.answer(
            f"""‚úÖ–£—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ {get_word_declension(count=count_sentences, word="—É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ")},
–º–æ–∂–µ—à—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ—â—ë –∏ —è –¥–æ–±–∞–≤–ª—é""",
            reply_markup=await keyboard_builder(1, AdminMenuButtons.MAIN_MENU, AdminMenuButtons.EXIT))

    except Exception as e:
        await message.answer(text='‚ùó' + str(e),
                             reply_markup=await keyboard_builder(1, AdminMenuButtons.EXIT))


@admin_router.message(StateFilter(AdminFSM.editing_exercise_words))  # EDIT words
async def admin_editing_words(message: Message, state: FSMContext):
    if message.text.isdigit():
        index = int(message.text)
        await update_state_data(state, index_words_edit=index)
        data = await state.get_data()
        subsection, section, index_testing_edit = data.get('admin_subsection'), data.get('admin_section'), data.get(
            'index_testing_edit')
        exercise_name = f'\"{section} - {subsection}\"'
        await message.answer(
            f"""–û—Ç–ª–∏—á–Ω–æ, –±—É–¥–µ–º –∏–∑–º–µ–Ω—è—Ç—å \n—Å–ª–æ–≤–æ ‚Ññ {index_testing_edit}\n–í —Ä–∞–∑–¥–µ–ª–µ {exercise_name} 
–í–≤–µ–¥–∏ —Å–ª–æ–≤–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: \n–°–ª–æ–≤–æ=+=Word –∏–ª–∏ –°–ª–æ–≤–æ|Word""")
        await state.set_state(AdminFSM.ready_to_edit_exercise_words)
    else:
        await message.answer('‚ùå–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑',
                             reply_markup=await keyboard_builder(1, AdminMenuButtons.MAIN_MENU, AdminMenuButtons.EXIT))


@admin_router.message(StateFilter(AdminFSM.ready_to_edit_exercise_words))  # EDIT words
async def admin_edit_words(message: Message, state: FSMContext):
    data = await state.get_data()
    subsection, section, index_words_edit = data.get('admin_subsection'), data.get('admin_section'), data.get(
        'index_words_edit')
    try:
        words = check_line(message.text)
        await new_words_service.edit_new_words_exercise(section=section, subsection=subsection, russian=words.russian,
                                                        english=words.english,
                                                        index=index_words_edit)
        await message.answer('‚úÖ–£—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ',
                             reply_markup=await keyboard_builder(1, AdminMenuButtons.MAIN_MENU))
        await state.set_state(AdminFSM.default)
        await update_state_data(state, admin_section=None, admin_subsection=None, index_words_edit=None)
    except Exception as e:
        await message.answer('‚ùå–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑\n –û—à–∏–±–∫–∞:\n' + str(e),
                             reply_markup=await keyboard_builder(1, AdminMenuButtons.EXIT))


@admin_router.message(StateFilter(AdminFSM.deleting_exercise_words))  # DELETE
async def admin_deleting_words(message: Message, state: FSMContext):
    data = await state.get_data()
    subsection, section = str(data.get('admin_subsection')), str(data.get('admin_section'))
    section_subsection = f'¬´{section} - {subsection}¬ª'
    indexes = []
    try:
        indexes = [int(num) for num in message.text.split(',')]
    except ValueError:
        await message.answer('‚ùå–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç, –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑ –≤–≤–µ—Å—Ç–∏ –Ω–æ–º–µ—Ä –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è',
                             reply_markup=await keyboard_builder(1, AdminMenuButtons.MAIN_MENU, AdminMenuButtons.EXIT))

    if len(indexes) == 1:
        index = indexes[0]
        await message.answer(
            f"""‚úÖ–°–ª–æ–≤–æ ‚Ññ {index}\n<b>–£–¥–∞–ª–µ–Ω–æ</b> –∏–∑ —Ä–∞–∑–¥–µ–ª–∞ \n{section_subsection}""",
            reply_markup=await keyboard_builder(1, AdminMenuButtons.MAIN_MENU, AdminMenuButtons.EXIT))
        await new_words_service.delete_new_words_exercise(section=section, subsection=subsection, index=index)
    elif len(indexes) > 1:
        await message.answer(f"""‚úÖ–°–ª–æ–≤–∞ ‚Ññ {str(indexes)}\n <b>–£–¥–∞–ª–µ–Ω—ã</b> –∏–∑ —Ä–∞–∑–¥–µ–ª–∞ \n{section_subsection}""",
                             reply_markup=await keyboard_builder(1, AdminMenuButtons.MAIN_MENU, AdminMenuButtons.EXIT))
        for index in indexes:
            await new_words_service.delete_new_words_exercise(section=section, subsection=subsection, index=index)


##################### Activity #####################
@admin_router.callback_query(F.data == AdminMenuButtons.SEE_ACTIVITY_DAY)
@admin_router.callback_query(F.data == AdminMenuButtons.SEE_ACTIVITY_WEEK)
@admin_router.callback_query(F.data == AdminMenuButtons.SEE_ACTIVITY_MONTH)
async def admin_activity(callback: CallbackQuery):
    cbdata = callback.data
    today = date.today()
    if cbdata == AdminMenuButtons.SEE_ACTIVITY_DAY:
        stats = await daily_progress_manager.get(start_date=today, end_date=today)
        period = '—Å–µ–≥–æ–¥–Ω—è'
    elif cbdata == AdminMenuButtons.SEE_ACTIVITY_WEEK:
        stats = await daily_progress_manager.get(start_date=today - timedelta(days=7), end_date=today)
        period = '–Ω–µ–¥–µ–ª—é'
    elif cbdata == AdminMenuButtons.SEE_ACTIVITY_MONTH:
        stats = await daily_progress_manager.get(start_date=today - timedelta(days=30), end_date=today)
        period = '–º–µ—Å—è—Ü'

    info = f"""–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –∑–∞ {period}:
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: <b>{stats.get('testing_exercises')}</b>
–ò–∑—É—á–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö —Å–ª–æ–≤: <b>{stats.get('new_words')}</b>
–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –≥–ª–∞–≥–æ–ª—ã: <b>{stats.get('irregular_verbs')}</b>
–ù–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: <b>{stats.get('new_users')}</b>"""
    await callback.message.answer(info,
                                  reply_markup=await keyboard_builder(1, close_message_admin=AdminMenuButtons.CLOSE))


##################### Broadcast #####################
@admin_router.callback_query((F.data == AdminMenuButtons.BROADCAST))
async def start_broadcast(callback: CallbackQuery):
    await callback.message.edit_text(text=AdminMenuButtons.BROADCAST,
                                     reply_markup=await keyboard_builder(
                                         1,
                                         AdminMenuButtons.ADD_BROADCAST,
                                         AdminMenuButtons.MAIN_MENU,
                                         AdminMenuButtons.CLOSE, args_go_first=False,
                                         del_scheduled_broadcast=AdminMenuButtons.DEL_BROADCASTS))


@admin_router.callback_query((F.data == 'del_scheduled_broadcast'))
async def delete_broadcast(callback: CallbackQuery):
    await callback.answer()
    await callback.message.edit_text('–£–¥–∞–ª–∏—Ç—å –≤—Å–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–∞—Å—Å—ã–ª–∫–∏?',
                                     reply_markup=await keyboard_builder(1, AdminMenuButtons.CLOSE,
                                                                         args_go_first=False,
                                                                         sure_delete_broadcast=AdminMenuButtons.YES))


@admin_router.callback_query((F.data == 'sure_delete_broadcast'))
async def sure_delete_broadcast(callback: CallbackQuery):
    await callback.answer()
    await delete_scheduled_broadcasts()
    await callback.message.edit_text('–í—Å–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–∞—Å—Å—ã–ª–∫–∏ —É–¥–∞–ª–µ–Ω—ã',
                                     reply_markup=await keyboard_builder(1, AdminMenuButtons.CLOSE))


@admin_router.callback_query((F.data == AdminMenuButtons.ADD_BROADCAST))
async def add_broadcast_date_time(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    await callback.message.edit_text("""–í–≤–µ–¥–∏ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ\nHH:MM dd.mm.yyyy\n–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å UTC+3(–ú—Å–∫)""")
    await state.set_state(AdminFSM.broadcasting_set_date_time)


@admin_router.message(StateFilter(AdminFSM.broadcasting_set_date_time))
async def adding_broadcast_date_time(message: Message, state: FSMContext):
    try:
        datetime.strptime(message.text, '%H:%M %d.%m.%Y')
        await state.update_data(broadcast_date_time=message.text)
        await state.set_state(AdminFSM.broadcasting_set_text)
        await message.delete()
        await message.answer(
            f'–•–æ—Ä–æ—à–æ, —è —Å–¥–µ–ª–∞—é —Ä–∞—Å—Å—ã–ª–∫—É\n{message.text}\n\n–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Ç–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç —Ä–∞–∑–æ—Å–ª–∞—Ç—å')
    except Exception as e:
        await message.answer('–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –≤–≤–µ–¥–∏ –µ—â–µ —Ä–∞–∑ –≤ —Ñ–æ—Ä–º–∞—Ç–µ \nHH:MM dd.mm.yyyy')
        await message.answer(str(e))


@admin_router.message(StateFilter(AdminFSM.broadcasting_set_text))
async def adding_broadcast_text(message: Message, state: FSMContext):
    data = await state.get_data()
    date_time = datetime.strptime(data.get('broadcast_date_time'), '%H:%M %d.%m.%Y')
    text = message.text
    await schedule_broadcast(date_time=date_time, text=text)
    await message.answer('–û—Ç–ª–∏—á–Ω–æ. –†–∞—Å—Å—ã–ª–∫–∞ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è')
    await state.set_state(AdminFSM.default)
